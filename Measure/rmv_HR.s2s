'to remove an average HR artifact for neurogram channels, and possibly cell channels.
'need a HR marker channel.
'assumes the sample rate is 5000Hz

#include "include\basic_view.s2s"     'this will bring in two globals: GVt% and GChanList%[]
#include "include\marker_code_iter.s2s"  'this will bring in startcode%[4], endcode%[4] GetNextCode(), GetLastCode(), and CountBrsts()

var HRs[5000], avgdart[50000];
var HRtimeadvance, tlen%;
var smplrate;
var howmany%;

'HANDLE VIEWS
var viewtemp%;
viewtemp% := View(0);  'Save the current view
View(viewtemp%);         'restore the original view
DrawAll();
FrontView(viewtemp%);

'SELECT CHANNELS
var SnglSlctChn%[2];

'HR TRIGGER
var HRTrigChan%;
var HRBrstChan%,NumBrsts%;
Interact("Select event channel with HR triggers", 65536, 0, "&O Okay");
ChanList(SnglSlctChn%, 65536);
HRTrigChan%:= SnglSlctChn%[1];
HRBrstChan% := MemChan(5,HRTrigChan%);
NumBrsts% := BurstMake(HRBrstChan%,HRTrigChan%,0,MaxTime(),3);
InvrtBrstMake(HRBrstChan%);

'NEUROGRAMS TO DEARTIFICATIFY
var NrvChans%[10], CellChans%[10];
var NumNrvChans%, NumCellChans%;
Interact("select all your nerve channels to DEARTIFICATIFY", 65536, 0, "&O Okay");
ChanList(NrvChans%[],65536);
NumNrvChans% := NrvChans%[0];
resize NrvChans%[NumNrvChans%+1];

CursorDelete(-1);
var winrange;
winrange := XHigh() - XLow();
CursorNew(XLow()+(winrange*0.1));CursorNew(XHigh()-(winrange*0.1));

'DEMARK TIMES
var startt,endt;
Interact("DRAG THE TWO CURSORS TO DELIMIT YOUR TIME????? THEN PRESS THE TINY OKAY BUTTON!!!!!", 65536, 0, "&O Okay");
startt := Cursor(1);
endt := Cursor(2);

'FIND AVERAGE ISI, TO INDEX ARRAYS WITH
var NumHRs%, calcisi[50000], avgisis[100];
var avgisi, dpavgisi%, dpHRart%, timHRart, avgHRdur, minisi, minisidp%;
smplrate := BinSize(NrvChans%[1]);
var BurstStart, BurstEnd, m%;
BurstEnd := 0;
for m% := 1 to NumBrsts% do
    BurstStart := GetNextCode(HRBrstChan%, BurstEnd, startcode%[]);
    BurstEnd := GetNextCode(HRBrstChan%, BurstStart, endcode%[]);
    NumHRs% := ChanData(HRTrigChan%,calcisi[],BurstStart,BurstEnd);
    ArrDiff(calcisi[0:NumHRs%]);
    avgisis[m%-1] := ArrSum(calcisi[1:NumHRs%-1])/(NumHRs%-1);
next
avgisi := ArrSum(avgisis[0:NumBrsts%])/(NumBrsts%);
dpavgisi% := XToBin(ArrSum(avgisis)/NumBrsts%);
dpHRart% := dpavgisi%-XToBin(avgisi)*0.2;

'GET HR times into HRs array
NumHRs% := ChanData(HRTrigChan%,HRs[],startt,endt);

'SET PADDINGS
var leftpadmillisec, prepaddp%, postpad, cellavgdurprcnt;
prepaddp% := 100; 

'FIND THE AVERAGE PERI HR WAVE FORM, SET LEFT PAD
var j%, outchan%, whichchan%, iscell%;
whichchan% := 0;
for j% := 1 to NumNrvChans% do
    findavgHRart(NrvChans%[j%],avgdart[],prepaddp%,dpHRart%);
    tlen% := avgdart[0];
    PrintLog(avgdart[1:tlen%]);
    outchan% := substract(NrvChans%[j%],avgdart[1:tlen%],prepaddp%,dpHRart%);
next

'FUNCTIONS ARE DEFINED BELOW:
func substract(chan%,avgHRart[], prepaddp%, dplength%) 'give the time over which to avg the cell mem as prcnt(of avgisi)
    var dupchan%;
    dupchan% := MemChan(0,chan%);
    MemImport(dupchan%,chan%,0,MaxTime(chan%));

    var i%, count%;
    var tmp[dplength%], tmpstart, tmpstop, thistmplength%, avgrmp := 0, bumprmp;
    count% := 0;
    for i% := 0 to NumHRs% do
        tmpstart := HRs[i%]-BinToX(prepaddp%);
        tmpstop := HRs[i%]+BinToX(dpHRart%-prepaddp%);
        thistmplength% := ChanData(chan%,tmp[],HRs[i%]-BinToX(prepaddp%),HRs[i%]+BinToX(dpHRart%-prepaddp%));
        ArrSub(tmp[0:thistmplength%],avgHRart[0:thistmplength%]);
        'zeroout the actual HR
        ArrConst(tmp[prepaddp%-1:0.004/smplrate],0);
        ChanWriteWave(dupchan%,tmp[],HRs[i%]-BinToX(prepaddp%));
    next;
    return dupchan%
end

func findavgHRart(chan%, avgart[],prepaddp%, dplength%)    
    ArrMul(avgart[],0);
    var i%, count%;
    var tmp[dplength%], sumtmp[dplength%];
    count% := 0;
    for i% := 0 to NumHRs% do
        ChanData(chan%,tmp[],HRs[i%]-BinToX(prepaddp%),HRs[i%]+BinToX(dpHRart%-prepaddp%));
        ArrAdd(sumtmp[],tmp[]);
        count% := count% + 1;
    next;
    ArrDiv(sumtmp, count%);
    avgart[0] := dplength%;
    ArrAdd(avgart[1:],sumtmp[]);
end

proc setchantitle(inchan%, outchan%, appendstring$)
    var tmpchantit$;
    tmpchantit$ := ChanTitle$(inchan%);
    tmpchantit$ := Print$("%s_%s",Left$(tmpchantit$,5),appendstring$);
    ChanTitle$(outchan%,tmpchantit$);
end
